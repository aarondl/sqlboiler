// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (21.649kB)
// override/templates/singleton/psql_upsert.go.tpl (1.317kB)
// override/templates_test/singleton/psql_main_test.go.tpl (4.974kB)
// override/templates_test/singleton/psql_suites_test.go.tpl (527B)
// override/templates_test/upsert.go.tpl (7.124kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdf\x53\xdb\x3a\xf6\xc0\x9f\xed\xbf\xe2\x5c\x86\xb9\xd8\xdf\x09\xe6\x3e\xf7\x3b\x3c\x14\xe8\x65\x3b\xdd\x72\xb3\xa5\x6c\x67\xb6\xd3\xe9\x18\x5b\x0e\x1a\x14\x29\x95\x65\x20\xeb\xf5\xff\xbe\x73\x24\x39\xb6\x13\x87\x38\x21\xd0\x94\x75\x1f\x0a\xb6\x64\xe9\xe8\xfc\xd2\xd1\x07\xe5\xf9\x21\xec\x87\x8c\x86\x29\xbc\x39\x86\xe0\x2d\xfe\x46\xd2\xe0\x73\x78\xcd\x08\x98\x1f\xc1\x45\x38\x26\x45\xe1\xea\xae\x69\x74\x43\xc6\xa1\x69\xc6\x0f\xaa\x1e\xf0\x1f\x08\x2e\xab\xd6\xa2\x70\xdd\x3c\x07\x9a\x40\xf0\x36\x8e\x2f\x95\xa4\x91\xba\x9a\xa4\x44\x2a\x30\x4d\x34\x81\x7d\x6c\x3a\x67\xe2\x3a\x64\x70\x58\x14\xee\xd1\x11\x98\x2e\x27\xd3\x3c\xb7\x43\x0f\x3f\x90\x69\xf0\x99\x2a\x46\x4e\xc3\x94\x14\xc5\x39\x84\x4a\x91\xf1\x44\xa5\x10\x72\xa0\x1c\xbb\x0f\x20\xe4\x31\xc4\x82\xe8\x77\xd9\x24\x0e\x15\x01\x21\x81\x8e\xb8\x90\x04\x04\x87\x48\xf0\x84\xd1\x48\x05\x6e\x92\xf1\x08\x3c\x01\xff\x97\xe7\x66\xdd\xc1\xd5\xe4\x92\xf2\x51\xc6\x42\x59\x14\x7e\x07\x01\x3c\x2d\x3b\x17\x0a\xf6\x83\x0b\x71\x2a\xb8\x22\x0f\xaa\x28\x22\xf5\x80\xd3\xe0\x43\x60\x5f\x0e\x20\xcf\x09\x8f\x71\x6d\x56\xaa\x53\xc1\xb2\x31\x4f\x07\x56\x70\xfb\x08\xd7\x82\xb2\xc0\x3e\xf8\x40\xa4\x14\x12\x72\xd7\x91\x44\x65\x92\x83\x08\x56\x0a\xe5\x59\x7d\xd6\xe4\xd1\x63\x9e\x13\x75\x76\xe2\xf9\x79\x4e\x18\x76\x8b\xd4\xc3\x00\xca\x06\xdb\xd3\xb6\xf3\xb8\x28\x06\x8f\x4a\xe9\xbb\xda\x6e\x76\x41\xd6\x84\xa8\xf8\xba\x19\xf5\xef\xc3\x90\xd3\xa8\x69\xd1\xf3\xe1\xd3\xec\x06\x7a\xcc\x14\xdf\x69\xf5\x74\x35\xe4\xf9\xf0\xd9\xcd\x95\xbb\x0e\x4d\x50\x2a\x0c\x88\x5d\xb1\xd5\xff\x6b\x81\x7e\x3b\x06\x4e\x19\x4a\xe8\x4c\x50\x7f\x9e\x1e\xef\x8b\x0c\x27\xef\xa4\xf4\x88\x94\xbe\xef\x3a\x45\x9b\x5d\x97\xd9\xb1\xcd\x8c\x90\xa5\x94\x8f\xf0\x99\x3c\x90\x28\x53\x42\xae\x13\x90\xb5\xa1\x27\x9b\xd9\x78\xd8\xa2\x51\x94\xc4\x68\xef\x9d\x95\xa9\xa6\xd7\x45\xc3\x57\xdd\xed\xab\xda\x57\xab\xb5\xbd\x15\x87\x68\xf3\xd0\xba\x47\xa2\x88\xcf\x67\xf4\x2e\xa9\xf7\x39\x4c\x7f\x49\x48\x43\x7b\x10\x8b\x28\x1b\x13\xae\x42\x45\x05\x87\x44\x48\xb8\x11\xf7\xa0\x04\x4c\xa4\x98\x10\xc9\xa6\x90\xa5\xa4\xa9\x06\x3d\x63\x43\x13\x5b\x48\xf3\x3b\xe6\x53\xb3\x3d\x81\x26\x20\xe0\xb8\x32\xb1\xdd\x23\x74\x7b\x1a\x5c\x90\x7b\x6f\x2f\xcf\xf7\x83\xe1\xed\xc8\x6c\xdb\x6f\x80\x0b\xc0\x37\xf5\xbd\x1c\x95\x79\x47\x63\x12\x6b\x05\x67\x5a\x17\x7b\xda\x2b\x5c\x07\xb7\x79\x34\x33\x43\xc3\xed\x29\x3a\x26\xa9\x0a\xc7\x93\xef\xa6\xd7\xf7\x1b\xc2\x26\x44\xee\xc1\xbe\xde\xc6\x9d\x86\xeb\xfe\x4d\x88\xdb\x54\xfb\x53\x23\x00\x62\x71\x42\x12\x21\x89\xd1\xb9\xee\xd4\xdd\xe5\x17\x9d\xba\x5a\x31\x0a\xac\xe5\xd5\xfa\x74\x5d\x87\xff\xfb\x8c\x24\x61\xc6\x94\xae\x66\x7e\x64\x44\x52\x92\x06\x17\x82\xff\x8b\x48\x61\x9b\x2e\x89\xf2\x66\x4e\x71\x26\xee\x79\xe5\x16\x56\xdb\x5f\xa8\xba\xb1\x9d\x07\x20\x7c\xd7\x75\x8e\x8e\xe0\x24\xa3\x2c\x86\x28\x8c\x6e\x08\xdc\x92\x29\x50\x7e\xc8\x28\x27\x90\x8d\x18\x65\x53\x38\x84\xf1\x34\xfd\xc1\xe0\x2e\x85\x09\xfe\x9c\x48\x71\xcd\xc8\x38\x75\x9d\xeb\x2c\x41\x61\x52\x25\xc7\x21\x1f\x31\x82\xe9\xfc\x24\x4b\x12\x22\x3d\x5f\xb7\x06\x5f\x24\x55\xe4\x64\xaa\x88\x77\x90\x1c\x2c\xbe\x0b\x0e\x7c\xd7\x05\x00\xc8\x73\x19\xf2\xd1\xac\x2c\xd3\x1e\x5b\x7a\x8b\x56\xfa\xec\x43\x2c\xb7\xf8\x08\x3d\x21\x28\x8a\x3d\xdf\x7e\x0d\xb3\x68\x6f\x9b\x62\xe1\xeb\x54\xc9\x48\xf0\xbb\xe0\xbd\x12\xa1\xd7\x70\xd5\xe0\x03\xe5\x31\x66\x11\xf4\x9e\xef\x03\x88\x70\x81\x46\xb6\x66\xbf\x53\xc1\x52\x6d\xb3\xf9\xb1\x23\xed\x6c\xeb\x8b\xd1\x8c\xf2\xe5\x62\x34\xfb\x6d\x22\xc6\xe2\x98\x35\xe7\x7a\x64\x2c\xf4\x8d\x37\xc7\x80\xad\xb6\xc1\x77\x9d\xca\xf8\xc3\xac\x34\xfe\x75\x96\xf8\x3a\x80\x5a\x5d\xd1\xc4\xca\x29\xba\xdb\xc7\x4c\x05\x9f\xfe\x2e\xa2\x5b\x1c\x49\x3b\xe0\xc0\xf8\x61\x8c\x13\xad\xfe\xfe\xeb\x2d\x99\x7e\xeb\x3c\xd1\x15\x67\x66\x2a\xd7\xb9\x0b\xa5\x8e\x3d\x9d\x5b\x5c\x1d\xd3\xbf\xd9\x89\x51\x01\x65\x0d\x27\x89\x42\x41\x9a\x2a\x7f\x5f\x7b\xc2\x88\x73\x1d\x67\x99\x04\x6f\x19\x2b\x53\xe0\x23\xbd\x5a\x62\xb3\x5b\x6f\x91\xa9\xfa\x07\x95\x15\xf1\xd1\x77\x1d\xc7\xee\x51\x6f\x8e\xe7\x9c\xf7\xaa\xf6\xb4\x95\x25\x0c\x25\x1d\x87\x72\xfa\x81\x4c\x6b\x9d\x51\xd1\xa8\x59\x46\xb8\x0d\x32\x1f\xd3\xfb\x1f\x5a\xc5\x1d\xb2\x7b\xc6\xf5\x59\x4c\x09\x9b\xc6\x17\x72\xfd\x00\x22\x91\xb1\x58\x27\xdb\x6b\x9d\xc4\xec\x82\x23\x2d\x04\x30\x9a\xea\xdc\x8f\xc9\x1f\xec\x3f\x9d\x9d\x47\x0a\x3c\x46\x78\x5b\xba\xf1\xe1\x0f\x93\x71\x9c\x72\x33\x47\xf5\x7d\xfd\x96\x6a\x8f\xcf\x6b\xe3\x1c\xc2\xe3\x39\x0b\x6a\xff\x6c\xba\x1a\xd4\x3e\x9f\xa5\xac\xf2\x55\xd1\x68\x64\x29\x69\x91\x63\x1c\xde\x12\xaf\x14\x66\xa0\x35\xdb\xd5\x22\x98\x4d\x9c\x48\x4c\xa6\x5e\x39\xe0\x60\x59\x84\x2d\x7e\xdb\x26\x37\x0e\x87\x21\x13\xe0\x66\x34\x85\x63\x63\x02\x13\x74\xff\xc0\x57\x43\x91\xaa\x91\x24\xa9\x17\xd3\x90\x11\x9c\x0f\x2d\x9c\xd6\x0f\xd2\x7b\x03\x50\x32\x23\x3a\xd2\xca\xa2\x61\x00\x95\x80\x26\xf2\xfc\x6a\xae\xbb\x90\x65\xe4\x63\x38\x99\xe8\xf5\x63\x08\x57\x9b\xe1\x09\xe5\xb1\x6d\x5a\xa6\x95\xcf\xd3\x09\x59\xba\xec\xd9\xb0\xe5\xac\x4e\xb9\xd7\xd7\xb6\xe8\xc6\x1e\x8d\x59\xb1\xf4\x70\x49\x94\x8f\x1d\xad\x7b\x1b\x71\x25\x51\xcf\x2d\x2c\xce\x8b\x13\xb6\x88\xda\x94\x55\x0b\x5b\x98\x4a\x48\xab\x51\xe7\x7f\x92\xa0\x69\x82\xf7\x3c\xa6\x92\x44\xca\x2b\x5f\xfc\x13\x7b\xfc\x95\x78\x02\xfd\xe6\x2e\x64\x8d\xb2\x43\x37\xa6\x7f\x4a\x31\x2e\x97\xa0\x07\xb4\xc9\xbb\x61\x24\xdf\x24\x5b\x23\x49\x0a\x5f\xbf\x51\xae\x88\x4c\xc2\x88\xe4\xa6\x96\x42\xdd\xcd\x2b\xab\xa6\xc8\xf2\xc3\x6a\xf2\xa1\x92\xcb\xa7\xae\x8d\x51\xd6\x7c\xcd\x5a\x77\x56\xc3\xe9\x22\xf4\x8c\x5c\x67\xa3\x8f\x22\x26\x7a\xae\x64\xac\x82\x3f\x27\x92\x72\xc5\xb8\x57\xb5\xeb\xad\x50\x96\x33\x68\x6f\xf7\x57\xf7\x46\x9d\xf9\xb6\x8c\xab\xa2\xb9\x9c\xf8\x7d\xaa\x3b\x7b\x91\x7a\xd0\xa7\x2a\xe7\x5e\x7f\xa6\xf7\xd7\xb9\xa1\x70\xad\xba\xdf\xfc\x9c\xf7\x1d\xe4\xba\x6f\x93\x66\x16\xc0\xab\xd5\xdf\xae\x3e\xc7\xf8\x32\x16\xb1\x81\x0e\xf5\x4f\xe2\xde\xab\x89\x61\xe6\x0b\x82\xc0\x0f\x2e\xa3\x50\xc7\x06\x1a\x11\x5f\xe8\x31\x6b\xd9\xad\x65\x24\x3b\x95\xa7\x4b\xe6\x75\x46\xb5\xeb\x9a\xc5\xc2\xf1\x31\xa4\x3f\x58\xf0\x4e\xca\x0b\xf1\x49\xdc\x9b\xe2\xc6\xce\x88\x41\x72\x74\x04\x65\x8e\xd2\xc7\x3a\x7e\xa0\xac\xa3\x42\xc8\xa7\xea\x06\xcf\x7f\xf7\x37\x84\x83\xba\x21\x92\x1c\xa4\x78\xde\x30\x39\xca\x46\x92\x49\xd3\x8f\xe8\xe9\x7b\x19\xf6\x7a\x81\x78\x4a\x6a\x57\xd3\xbc\x56\x16\xbf\x5b\xad\x94\xa6\x0e\xaa\x83\x4a\xeb\xf9\x02\xf7\x5c\x3c\x37\xe3\xa1\xd9\xe4\xe5\xb5\x76\xde\xf2\x44\x35\x57\x37\x75\x2b\xc4\xca\x82\xaf\x43\x77\x5d\xe0\xc1\xb1\x59\x70\xe7\x09\x66\x85\x9e\xf3\xd8\x39\x6e\x86\x20\x63\xf1\x36\x51\x44\x6e\x76\x86\xb3\xa7\xb4\x99\xe9\xec\xa8\x9c\xb2\xfa\xf9\x4d\x13\x89\xb2\x60\xd8\xcf\x6c\x25\x6d\x55\x7a\xf5\x81\x4c\x8d\x4c\x8f\xa3\xe3\x97\xe3\xc3\x5a\xc2\xdd\x21\xc3\x0b\xe2\xf4\x4c\x78\x07\x99\xf0\xcf\xb1\x52\x4f\x83\x77\x90\x06\x2f\x71\x85\x1d\xe2\xc0\x0b\x12\xbe\x4e\x02\xdc\x25\x26\x7b\xf6\xdb\xb3\xdf\x5d\x60\xbf\xc6\x57\x7b\xea\xdb\x53\xdf\x9e\xfa\xf6\xd4\xf7\x19\xa9\x6f\x23\xd1\xac\xcf\x7b\x17\xf3\x54\x4f\x7a\x7b\xd2\xdb\x93\xde\x9e\xf4\xf6\xa4\xb7\x27\xbd\x3d\xe9\xfd\x5f\x27\xbd\xf3\x84\x69\x19\xce\x3d\x13\x17\x42\x7b\x5e\x1b\xd7\x7d\x1a\xc3\xad\x86\xae\xd6\xb7\x06\x0d\xdc\x84\xd3\xce\xa6\x34\x33\x3e\x19\xfa\x75\x63\xb1\x35\xdd\x2e\xe1\x78\x95\x2a\x7e\x12\x92\xad\x09\xb0\x75\x63\xb4\x02\xb8\xe7\xb5\xc4\x53\x79\xeb\x2a\x33\x75\xe3\xae\x2b\x19\x6b\x6d\xbc\x0d\x61\x6b\x35\xc2\xa2\x1e\xb7\x8e\xcc\x9e\x6a\xe4\x16\x9f\x5a\x04\xab\xdb\x27\xa9\x33\x29\x9e\x6a\xb4\x0d\x49\xe9\x46\x5c\xf4\x91\xf8\x78\x51\xbb\xae\xc7\x3e\x17\xd0\xe7\xb6\xc9\x67\x30\x47\x3e\x37\x04\x9f\x3d\xf7\xec\xc0\x3d\xd7\x7f\xd7\xb3\xc3\x9e\x1d\x3e\x3f\x3b\xdc\x12\xe8\x49\x42\x96\x96\xa4\x87\x53\x66\xff\xeb\x09\x4f\x4f\x78\xb6\x40\x78\x7a\xc0\xf3\x14\xc0\xd3\xf3\x9d\x4e\x7c\xe7\x17\xc6\x3b\x2b\xe8\xce\xaf\x0f\x77\x36\x60\x3b\x5b\xbc\xc4\x67\x7a\xad\x84\x3b\x2f\x73\x57\x6f\x33\xbc\x63\x66\xfe\x8b\x9f\x96\x7f\x6e\xba\x16\x82\x55\x7f\x8b\x29\x4f\x2b\xd5\x1f\x9f\xb6\x70\x8d\x6f\x4b\x2c\x62\x5e\xf4\x05\xa9\x37\xbc\xd3\xb7\x9a\x23\xed\xc2\x8d\xbe\x1d\xb1\x71\x2b\x90\xd8\x11\x03\x3f\x13\x9e\xda\xe1\xdb\x80\x2f\x70\x95\xeb\xc5\xdd\xa8\x13\xce\xfa\x89\xae\x32\x33\xde\xeb\xbb\x35\xf8\x8b\x3b\x55\x0f\xd5\x5e\x1f\x54\xa3\xc9\xa2\xcb\x34\xa0\x93\x21\x55\xea\xc0\x6f\x14\xf2\x6d\x2c\xae\x33\xdf\x9a\x77\xc6\x6d\xde\xf9\xeb\xaf\x1e\xf6\xf8\xf0\x55\xe2\xc3\x5d\xb9\x7a\xb8\x90\x2d\x7e\xff\x7d\x9d\xeb\x88\xeb\x9c\xa0\xd7\xb9\x8c\xd8\xbc\xe0\x37\x97\x61\x2a\xf8\x58\x36\xd4\xe5\x9c\x7d\xf8\xf4\x8b\x81\x9b\xdf\x0c\x34\xd4\x71\x1b\x80\x78\xb1\x74\xeb\x6f\x05\xf6\xcc\xb8\x67\xc6\x3d\x33\xee\x99\x71\xcf\x8c\x5f\x17\x33\xae\xcc\xf2\xdf\x00\x00\x00\xff\xff\x98\x92\x0f\xe8\x91\x54\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x5d, 0x7b, 0x88, 0x17, 0xa, 0x21, 0x9, 0x4c, 0x12, 0x99, 0xcc, 0xea, 0x88, 0x87, 0x4c, 0x7e, 0x12, 0x50, 0x73, 0x69, 0x8a, 0x52, 0x2e, 0xec, 0x6b, 0x66, 0xc0, 0xf3, 0x4c, 0x24, 0x40}}
	return a, nil
}

var _templatesSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6b\xdb\x3e\x14\x7d\x96\x3e\xc5\xad\xa0\xd4\x06\xe1\xfe\xfa\xfa\x83\x3c\xb4\xb1\xdb\x65\x04\xbb\x89\xed\x6d\x30\xf6\xe0\xd8\xd7\xa9\xc0\x91\x33\xfd\xc9\x56\xd6\x7c\xf7\x21\xc7\xae\xd3\xa6\xa3\x14\x82\x12\x74\xef\x39\x3a\xf7\xe8\x28\x97\x97\xb0\xb2\xa2\xa9\xf2\xad\x46\x65\x16\x16\xd5\xe3\x7d\xab\xcd\x5a\xa1\x3e\x14\x34\x14\x90\x2e\xe6\xa0\x4d\x61\x70\x83\xd2\x80\x36\x4a\xc8\x35\x58\xed\x56\xf3\x80\x60\x3b\x6c\x58\x98\x02\xb6\xaa\xdd\x89\x0a\xab\x80\xd6\x56\x96\xff\xa4\xf6\x2a\x51\x40\xa5\xc4\x0e\x95\x0e\x42\x51\x34\x58\x1a\x0e\xa6\x58\x35\x18\x17\x1b\xec\x8f\xe0\x60\xb7\x55\x61\x30\x91\xd3\x56\xd6\x8d\x28\x0d\xac\xda\xb6\xe1\xa0\xd0\x0c\x35\x0e\x65\x5f\xe3\xf0\xeb\x41\x18\x6c\x84\x36\xf0\xfd\xc7\x81\xc1\x1f\xc4\xfe\xa1\x64\xe8\x83\x89\xdb\xdc\x14\x72\xdd\x60\x30\xab\x50\x9a\x85\x6d\x0d\xa6\x8d\x28\xd1\xe9\x0a\xe6\x0b\x0e\xee\x7b\xb9\x18\xc9\x7d\x4a\x46\xf6\x8f\x10\x3c\xa3\x7c\x4a\x14\x7e\x0c\xab\xd0\xf8\x94\x92\x95\xad\xe1\xff\x63\xdc\x1d\x9a\x1b\x5b\xd7\xa8\x3c\x9f\x92\x0a\x6b\x54\x47\xc5\x7b\x3b\x14\x57\xb6\x76\xf0\xb2\x6d\xec\x46\x6a\x47\xc1\xc2\xe8\xf6\x3a\x9f\x67\xf0\xe5\x7a\x9e\x47\x29\xa3\x44\xd4\xd0\xa0\xf4\x46\x95\x70\x36\x81\xff\x9c\x5d\xcf\xb8\x09\xd4\x1b\x13\xa4\x5b\x25\xa4\xa9\x3d\xe6\x9d\x6b\xbf\xc7\x83\xfb\xcd\x38\x25\x84\x1c\x6c\xd6\xc1\xe7\x56\x1c\xb1\x71\x60\x1c\x98\x3f\x74\x0c\x0a\x9b\xa2\xc4\x87\xb6\xa9\x50\x75\x41\x08\x72\x8d\x33\x59\xe1\xef\xe3\x02\x7f\xa5\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x7b\x45\x94\x38\x87\xdc\x19\x6c\x16\xa7\xd1\x32\x83\x59\x9c\x25\x70\xae\xdd\x27\x89\x61\x9a\xc4\xb7\xf3\xd9\x34\x83\x4e\xe9\x73\xc6\xf8\x38\x22\xa7\xc4\x19\x25\x6a\x38\x3b\x09\xdc\xd3\x53\x27\xe4\xb0\xef\xc3\x64\x70\x67\x65\xeb\xe0\xab\x12\x06\xd3\x6e\x72\x8f\x85\x09\xc4\x49\xf6\x69\x16\xdf\x31\x27\x12\xb0\xd1\xf8\xb2\xf3\xe6\xd1\xa0\x77\xe1\x5d\xf8\x6f\xc0\x5f\xf8\x37\x26\xba\xb3\xef\xad\x7e\xe6\x43\x98\x40\x7e\x1f\x5e\x67\x11\xa4\x51\x06\xcc\x4d\x40\xea\x56\x81\xe0\xb0\x73\x97\xad\x0a\xb9\xc6\xfe\x95\x74\x42\xdc\x80\x62\xbc\xdf\x13\x65\xbc\x53\x46\xf6\x6e\xf9\xe9\x52\x59\xbd\x8c\xdd\x18\xd7\x93\xa4\xee\x3a\xe4\x6b\x91\x07\x92\x37\x4b\x0c\x26\x10\x7d\x9b\xce\xf3\x30\x0a\x03\xf6\x0e\x7a\x7f\xb8\xf4\x3e\xab\xee\x55\x8c\x53\x9c\x12\x2f\xa3\x2c\x5f\xc6\xb3\xf8\x0e\xd8\xbb\x4e\x77\x7f\x24\x83\xc9\xee\x0c\x85\xc6\x2a\x09\x0e\xd4\xf7\xfb\x74\x4f\xff\x06\x00\x00\xff\xff\x76\xcb\x6a\x7a\x25\x05\x00\x00")

func templatesSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonPsql_upsertGoTpl,
		"templates/singleton/psql_upsert.go.tpl",
	)
}

func templatesSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x25, 0xb2, 0xa1, 0x78, 0x77, 0xde, 0x3, 0x46, 0x95, 0xac, 0xcf, 0xb0, 0xa1, 0xf5, 0xf1, 0x14, 0x37, 0x11, 0x4d, 0x5f, 0x91, 0x90, 0x62, 0xc7, 0x92, 0xef, 0xee, 0x53, 0xcb, 0xb2, 0x5f}}
	return a, nil
}

var _templates_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\x39\x03\x39\x48\x5b\x87\x3e\xf4\xe5\x4b\x0e\xc6\x21\x71\x9c\x74\x71\xd9\x24\x6b\xbb\x3d\x14\xdd\xf6\x8e\x96\x46\x0e\x11\x89\x64\x48\x2a\x59\xf7\x90\xff\x5e\x0c\x29\xd9\xb2\x63\x25\xdb\x6e\x0b\xdc\xa7\x84\xe4\x33\xef\x0f\x87\x23\x3f\x72\x03\x66\xf5\xf9\xf6\xf2\xe2\x1e\xd7\x30\x06\x83\x2b\xfc\xac\xd9\x87\xda\xba\x89\xaa\xb4\x28\x31\xf9\x25\xf9\xa1\x4a\xff\x79\x7a\xb5\x98\xce\x60\x71\x7a\x76\x35\x05\xf6\xee\x93\xfc\x64\x7f\x77\x7a\x7e\x0e\x93\x9b\xeb\xf9\x62\x76\xfa\xfe\x7a\x01\xec\xdd\x0f\x70\x71\x33\x9b\xbe\xbf\xbc\x86\x1f\xa7\x7f\xa3\xf5\xf7\x9f\xe4\x2f\x69\x1c\xbb\xb5\x46\xd0\xab\x05\x5a\x87\x06\xac\x33\x75\xe6\xe0\xd7\x38\xca\x97\x13\x25\x25\xbc\xb3\x0f\x25\x3b\x3f\x8b\x69\xe3\x9a\x57\x08\x04\x11\x72\x15\x47\x77\xca\x3a\x80\xed\xba\xb6\x68\xba\x6b\xcd\xad\xed\xae\xad\x2d\x2b\x95\xe3\xf6\x5c\x19\x2f\x2f\xa4\x8b\xe3\x48\xaf\x6e\xb9\xb5\x17\xa2\xdc\x00\xe2\xc8\xa1\x75\xe7\x67\xde\xea\x46\xc9\xbd\xd0\xf3\x8f\x57\x93\x2a\x87\xa5\x52\x65\xfc\x1c\xc7\x45\x2d\x33\x10\x52\xb8\x24\x0d\x7e\x7f\xe0\x42\xc2\x18\xbe\x6d\x83\xfa\xf5\x99\x60\xa3\x11\x58\x74\xb5\x86\xbc\xae\xb4\x05\x77\x87\x90\x73\xc7\x97\xdc\x22\xd8\xec\x0e\x2b\x0e\x5c\xe6\x20\x2a\xf2\xcb\x82\x70\xe4\x98\x02\x0e\x0e\x69\x8b\x9b\x35\x18\x2e\x73\x55\x95\x6b\xd2\xb5\x42\x89\x86\x3b\xcc\x81\xbc\xec\xa8\x52\xe0\xee\xb8\xf3\xbb\x16\x32\x2e\x61\x89\x60\x6a\x09\x7c\xc5\x85\xb4\x8e\x14\xd7\x56\xc8\x15\x79\xb0\xab\xc8\x3e\x94\x4b\x25\x4a\x34\x70\x33\xfb\x00\x9a\x67\xf7\x7c\x85\x2c\xc4\x97\x68\x78\xd7\xc6\x93\x86\x40\x92\x14\xd0\x18\x65\x28\x68\x62\x0a\x1a\x13\x36\xe2\x38\x7a\x14\x1a\x0d\x9b\xa3\x3b\xc7\x82\xd7\xa5\x4b\x06\x9a\xea\x18\xe2\x1c\x0c\x61\xa0\xeb\x65\x29\xb2\x41\xda\x0b\xa5\x2c\x0c\x86\xf0\xa7\x3f\xfe\xe1\xf7\xfd\xa0\xa6\xa4\xa4\xd0\xe0\x43\x2d\x0c\x0e\x52\xaa\x25\x6b\xb8\x32\x86\x20\x78\x89\x6e\xee\x0b\xd8\xc8\xe5\x4b\xc9\x2b\xc2\x46\x9a\x79\x1a\xf5\x01\xe9\x30\xc0\x3c\xbb\xfa\x60\x74\x18\x60\x9e\x74\x7d\x30\x3a\x6c\x60\xc4\xbd\x0e\xec\xbd\xdc\x89\xdb\x63\x5a\xbe\xf6\x69\x6b\x83\xf7\xe0\x0e\x55\xfb\xf0\x04\xe9\x06\xde\xa1\x72\x47\xe4\x4c\xa9\xb2\x35\x70\x2f\xe8\x6f\x56\xe5\x3e\xab\x54\xdf\x31\x3c\xf2\x92\xb3\x33\x5c\x09\xf9\x57\x5e\x8a\x9c\x3b\xa1\x64\x92\xb2\x66\x81\x49\x1c\x45\x1e\x12\x4c\x5f\x2b\x37\xad\xb4\x5b\x27\x21\x81\x54\xf8\x6d\xbe\x86\xbd\x58\x4a\x7b\x8b\x0d\x25\xd8\x60\xaf\x95\x4b\xfc\x3f\xd3\x87\x9a\x97\x36\x09\xb9\x1c\xc2\x77\x2d\x3e\x24\xf0\x15\xe5\x81\x1b\x2d\xbc\xcd\x48\x3f\xbe\xc9\x73\x2b\xb0\x49\xfb\x30\x8e\x52\x36\xb9\xc3\xec\x3e\xa1\xf4\x88\xc2\xdf\x80\x6f\xc6\x20\x45\x49\x77\x22\x32\xe8\x6a\x23\x69\x37\x8e\x9e\xe3\x38\x1a\x8d\x40\x14\x20\x95\xbf\x9b\x74\x03\xcf\xcf\x80\x28\x81\xb9\x97\x2e\x51\x26\xdd\x42\xa6\x30\x1e\xc3\x77\x5e\xd3\x68\x04\x13\x83\xdc\x21\xf0\xa6\x09\x88\x7f\x61\x0e\xf9\x12\xc8\x79\x16\x47\xfb\x0c\xd8\x80\xd8\xdc\xf1\x65\x89\xe1\x60\x13\x7c\x1a\x1c\x6a\x5c\x1e\x83\x66\x15\xbf\xc7\xdb\xcb\xb6\x05\x26\xe9\xf7\x6f\x05\x23\x0a\xf8\x66\x87\x43\x04\xea\x28\xcc\x8d\xd2\x0b\xef\xd2\x01\x65\x3b\xda\xa2\xe7\x5d\xc9\xcc\x47\xfa\xc5\xb2\x71\x14\x51\x47\x25\x17\x4e\xc6\x80\x9f\x31\x63\x13\x55\x55\x5c\xe6\xc9\x40\xaf\x7e\xa6\x33\xea\x0f\xc7\xc7\xa1\xf9\x1c\x2b\x59\xae\x07\x43\xe8\xa4\xa2\x95\x67\x53\xf9\x08\x63\xe0\x5a\xa3\xcc\x13\x65\x69\x2d\x0c\xd1\x9b\xe0\x7a\x35\x95\x8f\x49\xca\x18\x23\x91\xe0\xe4\x61\xa3\xf6\xa1\xf4\x06\x3a\xa5\xec\x4a\x7c\xb9\x19\x4a\xfb\x10\x9e\xc8\x84\x50\xec\x56\x68\x4c\x3a\xee\xce\x5d\x4e\xa9\x39\x19\xc3\xb7\xcb\xb5\x43\xcb\xce\xea\xa2\xf0\xaf\x4d\xc7\x58\x3f\xa8\x13\xf7\xdc\xe5\xaa\xa6\x7e\xf4\xb4\xbb\x19\x2a\xb2\x63\x2e\xde\x89\x64\xee\x72\xff\xd4\x49\x7c\xba\xf8\x11\xd7\xe7\x68\x9d\x51\x6b\x34\xc9\x66\x6a\x18\x82\x49\xf7\x45\x82\xda\x3d\x17\xe3\x2e\x09\xb6\x3e\x70\xe3\x5e\xe7\x80\x32\x96\xfd\x64\xb8\x4e\xd0\x50\x7b\x29\xb8\x28\xe9\x4d\x54\x60\x49\x16\x1a\x06\x40\x16\xaa\x43\x9d\x6f\x97\x6f\x5d\xcf\xbe\xda\x98\x7d\x28\xf7\x2c\x1d\x8a\xea\x27\x2e\x0e\xda\x29\x2a\xc7\x6e\x8d\x90\xae\x94\x64\x20\xdd\xdf\xdb\x29\x44\xd3\xa7\x92\x34\xfd\x42\x17\x9f\xb8\x70\x50\x28\xd3\x93\x92\x38\x8a\x7e\x26\x06\xb0\x49\xa9\x2c\x26\x29\x8c\x46\x70\x5a\xd0\x48\xd6\xde\x2e\x61\x21\x57\x12\x87\x90\x11\xc2\x0f\x30\x4f\x46\x38\x04\x94\x39\xa8\xc2\x6f\x68\xa1\x31\x3e\x9c\xde\xff\x36\xea\x3d\x9e\x7c\x45\xdc\x2f\xab\xe3\xe3\x6e\x74\x48\xb1\x9d\xe6\x76\xa7\x1d\x53\xcb\x49\x95\x27\x96\xc8\x3e\x6c\x35\x34\x13\xe1\x10\xb8\x59\x59\x60\x8c\x85\x75\x67\x26\xca\x0e\x34\x87\x46\x38\x48\x85\x56\x92\xfd\x67\x1d\xa1\x79\x28\xbc\x33\x29\x25\x32\xbc\x10\x59\xe7\x36\x06\x4f\x2c\xbb\xc6\xa7\x19\xf2\x1c\x4d\x83\x0e\xe1\xda\x70\xd9\x0f\xb5\x0d\xdb\xdf\x51\xb2\x6e\x9b\x08\x2a\x36\x9b\xa1\xd2\x41\x78\xf3\xa8\x9c\x8c\x81\x8e\x67\xb5\x3c\x50\xf4\x6e\x7d\xdb\x52\x99\x5a\x4a\x21\x57\x27\x83\x4d\x8a\x43\x96\xd2\x3d\x7c\x30\xbe\x43\x83\xbd\xe3\x7d\x96\xec\x3f\x5d\x6f\x16\xbc\xc9\x38\xfc\xfd\x1f\x21\x95\xe4\x73\x23\xd4\x6e\xb5\x51\xcc\x35\xd9\x2d\x92\xc1\xed\xe5\x9f\x6f\xe6\x8b\xf1\x91\xf5\xad\x9f\x86\x16\x3f\x52\xec\x61\x6e\x6f\x66\x8b\xf1\x51\xee\x31\x34\xa8\x1c\xc2\xfc\x65\x3e\x9d\xb5\x7a\x68\x50\x3a\xa8\xe7\x74\x3e\xbf\x78\x7f\x35\x6d\x71\xdb\xaf\x17\x42\x3f\xf7\xc4\xb5\xff\xc8\x6f\xb9\xea\x2a\x3d\x6c\xcb\x26\x54\xed\x44\xc9\x16\x58\x69\x0f\x1b\xf8\x79\x7d\xd5\x0e\xaf\xaf\xcd\x39\xbd\x97\x30\x5c\x62\x50\x9a\xc6\x45\x28\x44\xe9\x67\x50\x2a\x06\x05\x76\xd1\x04\xe6\xbd\x18\x1c\xd9\x93\xa3\xfc\x44\x2b\xeb\x56\x06\xed\x49\x27\xa3\x6d\xd6\x36\x99\xe9\xcc\x4d\xe4\x5e\xe7\x3e\xbc\x54\xdb\x2a\xf2\x40\xb2\xdd\xc1\x94\x92\x40\xe9\x2b\xee\x1c\xf5\x3a\xd2\x8e\x93\xbf\x21\x97\xb6\x83\xc7\xff\xd1\xad\x2e\xe9\x60\x0c\xae\xd2\xcc\xcf\x98\xe9\xe6\xae\xd0\x56\xf3\x9a\xf4\x10\x72\x77\xd4\xdb\xd2\xb1\x51\xa0\x59\xd3\x7a\x3d\x05\x03\x38\x5f\xbe\x98\xad\x0e\xeb\xee\x0e\xa0\x6f\x68\x26\xa8\xd7\x3b\x38\x3e\x16\xc5\x31\x7e\x16\xd6\xd9\x43\x66\x46\x23\x70\xc8\x4d\xae\x9e\xa4\xef\xeb\xb5\x43\x0b\x59\x89\x5c\xd6\x1a\x1c\xb7\xf7\x16\x9e\xee\x50\xfa\xa7\x30\x7c\x80\x17\x42\x0a\x7b\xd7\x36\xb7\x43\x7e\xb6\x0a\xfb\x3f\xa7\x77\xc6\x6a\xff\xab\x48\x9b\xd6\x37\xa6\xf4\xa8\xc5\x83\x47\xfc\xcf\xa7\xf6\x4e\x33\x55\x96\xcd\xb0\x52\x8f\xf4\x8d\xd1\x69\x46\x7d\x75\x57\x92\xe2\x4d\x9a\x1f\x77\x86\x21\x50\xff\xf3\x89\x28\x36\x51\x1e\x08\xac\x3d\x1a\xfa\x78\xbc\x03\x7b\xb9\xda\x22\x9a\x67\xe9\xa1\x64\x37\x1a\x65\x32\x68\x3b\xca\x60\x08\xb9\x11\x8f\x68\xd8\xed\xfc\xe3\xd5\x59\x2d\xca\xfc\x63\x8d\x66\xdd\x3c\x19\xed\x97\x6a\xe0\xff\xcb\xeb\xb4\x7f\xd9\x9a\xef\xc1\xf4\xb5\xd6\x28\x45\x39\x7c\xf1\xfe\xec\xc6\xf2\x1c\xff\x3b\x00\x00\xff\xff\xa1\x67\x61\x83\x6e\x13\x00\x00")

func templates_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testGoTpl,
		"templates_test/singleton/psql_main_test.go.tpl",
	)
}

func templates_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x99, 0x16, 0x85, 0x72, 0x61, 0x66, 0xa7, 0x45, 0xbb, 0x44, 0xea, 0xe5, 0xf, 0x43, 0xb6, 0xe3, 0x86, 0x70, 0xcd, 0x74, 0x56, 0x24, 0x39, 0x7b, 0xdb, 0x45, 0xd3, 0x93, 0xdd, 0x42, 0xd1}}
	return a, nil
}

var _templates_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4a\xc3\x40\x10\x86\xef\x7d\x8a\xa1\xe4\xd0\x48\xbb\x0f\x20\x78\xa8\x7a\xd1\x42\x29\x9a\x3c\xc0\xda\x4c\xe3\xe0\x3a\x29\x99\x09\x18\x96\x7d\x77\xd9\xec\xb6\x04\xf4\xa6\xb7\x59\xfe\x9f\xef\x9b\xd9\xd3\xc0\x47\xa8\x50\xb4\x3e\x0b\xf6\xba\x52\xb8\x51\x14\x25\x6e\x4d\x55\x82\x5f\x00\x78\xbf\x81\xde\x72\x8b\x50\x10\x37\xf8\xb5\x86\x42\xed\x9b\x43\xb8\xbd\x03\x53\xc5\x49\x42\xc8\x3d\x3a\xe5\xd0\x3c\xc9\x73\x47\x3c\xc5\xb0\xb9\xe6\xe8\x64\xfe\x2c\xac\x23\x2b\x11\x54\x98\x6d\x1c\x51\x12\xf1\x42\xd9\xdb\x4f\xcc\xed\x88\x36\xdb\xa6\x79\xd5\x9e\x8e\x79\xdb\x8c\x52\xf3\x32\xf0\x6a\xe9\x7d\xe2\x99\xfa\x7c\x70\x43\x6f\x5d\x08\xcb\x35\xc4\x6b\x7e\x49\x12\xe0\x7e\xf4\x3e\xab\x0e\x3b\x1c\x4d\x45\xea\xf0\xc1\x0a\x86\x50\x4e\xd6\x7c\xf8\xf0\x81\xe3\xb4\x66\xea\xd6\x3b\x1c\xe5\x7f\xe4\x91\xfc\x53\x8b\xdc\xfc\x19\xff\xd8\xed\x3b\x7d\x27\x6e\xcb\xcb\xe7\x5f\xa1\x73\xc1\x3c\x09\x8b\xef\x00\x00\x00\xff\xff\x33\x67\x97\xce\x0f\x02\x00\x00")

func templates_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testGoTpl,
		"templates_test/singleton/psql_suites_test.go.tpl",
	)
}

func templates_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xff, 0x84, 0x40, 0xfc, 0x38, 0x88, 0xf6, 0xa6, 0x17, 0x78, 0x47, 0x21, 0x62, 0x5d, 0xbd, 0x5b, 0x71, 0xda, 0xa8, 0x7f, 0x1a, 0xf0, 0xd8, 0x8d, 0x33, 0x9d, 0x8a, 0xfb, 0xfc, 0xe6, 0x73}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x2a\xa4\x05\x55\x68\xb9\xe8\x35\x85\x0f\xce\xc7\x61\x11\xd4\x30\xd6\xf2\xa9\x28\x0a\x46\x1a\x29\x44\x68\xd2\xa5\xa8\xc6\x2a\xc1\xff\x5e\x50\x52\xec\x24\x8e\xb7\xc6\x76\x17\xb1\x03\x07\x48\x62\x12\xc3\x99\xe1\x9b\x37\xf3\x2c\x39\xf7\x01\xce\xb8\x14\xbc\x86\xf3\x11\xb0\x71\xf8\x84\x35\xcb\xf8\xad\x44\xe8\xff\xb1\x09\x5f\xa0\xf7\x84\x38\x07\xa2\x04\x36\x2e\x8a\x99\x35\x22\xb7\xf3\x65\x8d\xc6\x82\xf7\xa4\x6c\x54\x0e\x16\x6b\xeb\x5c\xef\x8c\xcd\x97\x53\xd9\x18\x2e\xbd\xef\xad\x2e\x5a\xe7\x06\x77\xd3\x1b\x6c\x59\x26\xac\xc4\x4b\x5e\xa3\xf7\xd4\xc2\xcf\xe1\xac\x50\x15\xcb\x12\x70\x24\xb2\x6c\xca\x0d\x97\x12\x25\x4d\x08\x89\x44\x09\x12\x15\x5d\xfb\xbe\xd2\x0f\x6a\x26\x54\xd5\x48\x6e\xbc\x1f\x4b\x79\xa9\x65\xb3\x50\x75\x02\xa3\xd1\x97\x2c\xa7\x46\x2c\xb8\x69\x6f\xb0\x5d\x1f\x70\x24\x8a\x2c\x9b\xdd\x8b\x25\x8d\xc3\xdf\xa5\x50\x15\xd8\xee\xf2\x0f\xc2\xde\x81\x56\xb2\x85\x65\x7f\x0e\xee\xb1\x85\xbc\x3f\x19\x27\x24\xf2\x84\x44\x35\x62\x11\x80\x33\x5c\x15\x7a\x21\xfe\x41\x36\xc1\x87\x19\x62\x41\x13\x12\xfd\xcd\x0d\xa0\xe9\x7e\xb5\x21\xd1\xc7\x8f\x30\xb6\x16\x17\x4b\x0b\xf6\x0e\xe1\xd3\x64\x76\xfd\x39\x83\x5a\x14\x08\xba\x04\xae\x60\x3e\x0d\x3b\x24\xd2\xc1\xe3\x13\x24\x37\x37\x70\xbe\x43\x23\x38\x7d\x1a\x73\x66\x4d\x93\x5b\x1a\x92\x49\xe1\x27\x9d\xc2\x0e\x00\xae\x2e\xb2\x76\x89\x75\x0a\x25\x97\x35\x26\xbf\x76\x8e\x7e\x18\x81\x12\x72\x40\xe2\x3a\xa4\x5a\xd2\x78\xae\x3a\x0c\xac\xde\x44\x79\x3d\x23\xa8\xbb\xd8\xe7\xf0\x63\x1d\xa7\xc1\xdf\x00\x8c\x73\xa2\x04\xa5\x2d\x9c\xb1\x89\xbe\xd4\xca\xe2\xca\x7a\x9f\xdb\x55\xb8\x5b\xde\xaf\xd9\x05\xcf\xef\x2b\xa3\x1b\x55\xd0\xc4\x39\x54\x85\xf7\x24\xea\x4d\x7e\x6b\x6a\x9b\xad\x68\xe7\xe6\x99\x8b\xed\x9d\x5b\x2d\x24\xbb\xc0\x4a\xa8\xce\x8b\x0c\x9c\xda\xec\x65\x2b\x9a\xdb\x55\x1a\xee\xf8\x18\x63\x2f\xa3\x84\x44\x05\x96\x68\x20\x70\x9b\x26\xe0\xe0\x4f\x18\x81\x5d\xb1\xcf\x5a\xca\x5b\x9e\xdf\xd3\x04\x7c\xa8\xf2\xba\x1e\x9a\xfd\x37\xd5\x77\xc2\x12\x6a\x86\xaa\x80\x0f\xde\x43\x58\x75\xb9\x7d\x52\x25\x1a\x9a\x3c\x5f\xed\x57\xb6\xa6\xef\xcd\x57\x6b\xb6\x55\xac\x5c\x37\xca\x76\x1b\x2f\x98\xf7\xd8\xc3\x34\x61\x97\xc1\x66\xdf\xfc\x37\xb0\x6c\xa7\x49\x1f\xe3\x06\x93\x2e\x72\x30\xfa\xe5\x99\x49\xfc\xc0\x95\x05\xad\x10\x0c\xe6\xda\x14\x29\x54\xda\x9e\xc7\x69\x6f\x3f\x64\xfd\xa2\x9f\xe6\xd3\xab\x71\x76\xfd\x5a\x3f\x7d\x8b\x8e\xb1\xa6\xc1\x9d\x56\x5b\x83\x85\x31\xf6\x5d\xbb\xeb\x7d\x71\xee\x58\x28\xd7\x49\xa0\xe1\xaa\x42\x38\x6b\x82\x18\x04\xc5\xec\x41\x9f\xdf\x60\x5b\x87\x4c\xf6\x94\xc2\xee\xfc\x7b\x11\xc1\x46\x89\xbf\x1a\x1c\xdc\x05\x50\x7e\xff\xa3\xb6\x46\xa8\xca\x11\x00\x80\xf0\x15\xe3\x09\x6a\xec\xd1\x30\xa0\x05\xc3\x4f\x1c\x8c\x58\xd8\x8a\xd3\xf5\xa1\xa1\xb8\xdd\xfa\x24\xb6\x27\xb1\xdd\x25\xb6\xdb\xcd\x74\xf0\x23\xef\x24\xb3\x5f\xe8\x95\x14\x9e\x4d\x94\x37\x11\xd3\x23\xe4\xd4\xb1\x50\xca\x93\x75\x40\xb2\x87\x5c\x5e\xe9\x89\xb6\x77\x42\x55\xc7\x2c\x91\x47\x2a\x5d\xe1\x5b\xef\x49\xb9\xbe\x8f\x72\x6d\x78\xfd\x55\x93\xe5\xa4\x4f\x6f\xa8\x4f\x07\xfb\x1c\x78\xd0\xa4\x3a\x16\x4e\xf5\xaf\x3a\x43\xf3\xc3\x7e\x12\x75\x52\xa6\x77\xac\x4c\xff\x5f\x98\xb6\x74\xe9\x90\x65\x89\xee\xba\xf8\xcb\xb9\x31\x8c\x42\x25\xe4\xe1\x3f\x46\xbd\xf5\x44\x39\xa9\xd4\xd7\x71\xac\x7f\xeb\xfa\xa6\x14\x3b\x12\x86\x3d\x7d\xa8\xfa\x37\x00\x00\xff\xff\xd1\xa5\x3b\x0d\xd4\x1b\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0xd4, 0xea, 0x7f, 0xb5, 0x44, 0x54, 0xe7, 0xb9, 0xb7, 0xed, 0x55, 0xbf, 0xb8, 0xa8, 0x6, 0xbc, 0x98, 0x88, 0xf0, 0x3b, 0x88, 0x91, 0xea, 0xbe, 0xde, 0x68, 0x7b, 0x54, 0x9f, 0x7e, 0x8b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/psql_upsert.go.tpl":           templatesSingletonPsql_upsertGoTpl,
	"templates_test/singleton/psql_main_test.go.tpl":   templates_testSingletonPsql_main_testGoTpl,
	"templates_test/singleton/psql_suites_test.go.tpl": templates_testSingletonPsql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"17_upsert.go.tpl": {templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": {nil, map[string]*bintree{
			"psql_upsert.go.tpl": {templatesSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": {nil, map[string]*bintree{
		"singleton": {nil, map[string]*bintree{
			"psql_main_test.go.tpl": {templates_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": {templates_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": {templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
